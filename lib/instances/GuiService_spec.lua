local GuiService = import("./GuiService")

describe("instances.GuiService", function()
	it("should instantiate", function()
		local instance = GuiService:new()

		assert.not_nil(instance)
	end)

	describe("BroadcastNotification", function()
		it("should accept a string and number", function()
			GuiService:new().BroadcastNotification("test", 123)
		end)

		it("should error when the first param is not a string", function()
			local instance = GuiService:new()
			assert.has.errors(function()
				instance.BroadcastNotification({}, 123)
			end)
		end)

		it("should error when the second param is not a number", function()
			local instance = GuiService:new()
			assert.has.errors(function()
				instance.BroadcastNotification("Hey", "ok")
			end)
		end)
	end)

	describe("GetNotificationTypeList", function()
		it("should return a table", function()
			assert.equal(type(GuiService:new().GetNotificationTypeList()), "table")
		end)
	end)

	describe("SetGlobalGuiInset", function()
		it("should accept four numbers", function()
			GuiService:new().SetGlobalGuiInset(1, 2, 3, 4)
		end)

		it("should error if x1 is not a number", function()
			local instance = GuiService:new()
			assert.has.errors(function()
				instance.SetGlobalGuiInset({}, 2, 3, 4)
			end)
		end)

		it("should error if x2 is not a number", function()
			local instance = GuiService:new()
			assert.has.errors(function()
				instance.SetGlobalGuiInset(1, "asdf", 3, 4)
			end)
		end)

		it("should error if x3 is not a number", function()
			local instance = GuiService:new()
			assert.has.errors(function()
				instance.SetGlobalGuiInset(1, 2, {}, 4)
			end)
		end)

		it("should error if x4 is not a number", function()
			local instance = GuiService:new()
			assert.has.errors(function()
				instance.SetGlobalGuiInset(1, 2, 3, "asdf")
			end)
		end)
	end)

	describe("SafeZoneOffsetsChanged", function()
		it("should exist", function()
			GuiService:new().SafeZoneOffsetsChanged()
		end)
	end)
end)